
database.js:
(
import Sequelize from 'sequelize'

const hostname = '127.0.0.1'
const username = 'postgres'
const password = '123'
const database = 'psicoapp'
const port = 5432
const dialect = 'postgres'

const sequelize = new Sequelize(database, username, password, {
    host: hostname,
    port,
    dialect: dialect,
    operatorAliases: false,
    pool: {
        max: 10,
        min: 0,
        acquire: 20000,
        idle: 5000
    }
})


export default sequelize
)

PacienteController.js:
(
import PacienteService from "../services/pacienteService.js";

const findAll = async (req, res) => {
    const result = await PacienteService.findAll();
    return sendResponse(result, res);
};

const findOne = async (req, res) => {
    const { id } = req.params;
    const result = await PacienteService.findOne(id);
    return sendResponse(result, res);
};

const create = async (req, res) => {
    const result = await PacienteService.create(req.body);
    return sendResponse(result, res);
};

const update = async (req, res) => {
    const result = await PacienteService.update(req.body);
    return sendResponse(result, res);
};

const remove = async (req, res) => {
    const { id } = req.params;
    const result = await PacienteService.remove(id);
    return sendResponse(result, res);
};

const sendResponse = (result, res) => {
    if (result)
        return res.status(200).json(result);
    else
        return res.status(500).json({ message: 'Ha ocurrido un error' });
};

// Controlador en Node.js para obtener el Paciente por id_usuario
async function getPacienteByUsuarioId(req, res) {
    try {
      const usuarioId = req.params.usuarioId;
      const paciente = await Paciente.findOne({
        where: { Usuario_id_usuario: usuarioId }
      });
  
      if (paciente) {
        return res.status(200).json(paciente);
      } else {
        return res.status(404).json({ message: 'Paciente no encontrado' });
      }
    } catch (error) {
      console.error('Error al obtener el paciente:', error);
      return res.status(500).json({ message: 'Error del servidor' });
    }
  }
  

export default { findAll, findOne, create, update, remove, getPacienteByUsuarioId };

)

PsicologoGeneralController.js:
(
import PsicologoGeneralService from '../services/psicologogeneralService.js';

const findAll = async (req, res) => {
    try {
        const psicologogenerals = await PsicologoGeneralService.findAll();
        return res.status(200).json(psicologogenerals);
    } catch (error) {
        return res.status(500).json({ message: 'Error al obtener los psicólogos generales', error });
    }
};

const findOne = async (req, res) => {
    const { id } = req.params;
    try {
        const psicologogeneral = await PsicologoGeneralService.findOne(id);
        return psicologogeneral
            ? res.status(200).json(psicologogeneral)
            : res.status(404).json({ message: 'Psicólogo general no encontrado' });
    } catch (error) {
        return res.status(500).json({ message: 'Error al obtener el psicólogo general', error });
    }
};

const create = async (req, res) => {
    try {
        const newpsicologogeneral = await PsicologoGeneralService.create(req.body);
        return res.status(201).json(newpsicologogeneral);
    } catch (error) {
        return res.status(500).json({ message: 'Error al crear el psicólogo general', error });
    }
};

const update = async (req, res) => {
    try {
        const updatedpsicologogeneral = await PsicologoGeneralService.update(req.params.id, req.body);
        return res.status(200).json(updatedpsicologogeneral);
    } catch (error) {
        return res.status(500).json({ message: 'Error al actualizar el psicólogo general', error });
    }
};

const remove = async (req, res) => {
    try {
        await PsicologoGeneralService.remove(req.params.id);
        return res.status(200).json({ message: 'Psicólogo general eliminado correctamente' });
    } catch (error) {
        return res.status(500).json({ message: 'Error al eliminar el psicólogo general', error });
    }
};

export default { findAll, findOne, create, update, remove };

)

UsuarioController.js:
(
import UsuarioService from '../services/usuarioService.js';
import { Usuario, Paciente, PsicologoGeneral, Psicologo } from '../models/index.js';
import sequelize from '../config/database.js';  // Importamos sequelize para transacciones

const findAll = async (req, res) => {
  try {
    const usuarios = await UsuarioService.findAll();
    return res.status(200).json(usuarios);
  } catch (error) {
    return res.status(500).json({ message: 'Error al obtener los usuarios', error });
  }
};

const findOne = async (req, res) => {
  const { id } = req.params;
  try {
    const usuario = await UsuarioService.findOne(id);
    return usuario ? res.status(200).json(usuario) : res.status(404).json({ message: 'Usuario no encontrado' });
  } catch (error) {
    return res.status(500).json({ message: 'Error al obtener el usuario', error });
  }
};

const create = async (req, res) => {
  const { nombre, apellido, correo, DNI, NumCelular, contrasena, fecha_nacimiento, especialidad } = req.body;

  console.log("Datos recibidos:", req.body);

  let rol = 'Paciente';
  if (correo.endsWith('@validamente.cpi.com')) {
    rol = 'Psicologo';
  }

  const transaction = await sequelize.transaction();

  try {
    // Insertar en Usuario
    const newUsuario = await Usuario.create({
      nombre,
      apellido,
      correo,
      DNI,
      NumCelular,
      contrasena,
      fecha_nacimiento,
      rol,
    }, { transaction });

    if (rol === 'Psicologo') {
      console.log("Verificando especialidad:", especialidad);

      if (!especialidad || especialidad.trim() === '') {
        throw new Error("La especialidad es requerida para psicólogos");
      }

      // Insertar en PsicologoGeneral
      const newPsicologo = await PsicologoGeneral.create({
        Usuario_id_usuario: newUsuario.id_usuario, // Relacionar con el usuario recién creado
      }, { transaction });

      // Insertar en Psicologo usando el ID del PsicologoGeneral creado
      const newPsicologo = await Psicologo.create({
        especialidad: especialidad,
        PsicologoGeneral_id_psicologogeneral: newPsicologo.id_psicologogeneral,  // Usar el ID de PsicologoGeneral
      }, { transaction });

      console.log("Psicologo creado con ID:", newPsicologo.id_Psicologo);
    }

    // Confirmar la transacción
    await transaction.commit();
    return res.status(201).json(newUsuario);

  } catch (error) {
    // Revertir la transacción si ocurre un error
    await transaction.rollback();
    console.error("Error al crear el usuario, psicólogo o Psicologo:", error);
    return res.status(500).json({ message: 'Error al crear el usuario', error: error.message });
  }
};



const update = async (req, res) => {
  try {
    const updatedUsuario = await UsuarioService.update(req.params.id, req.body);
    return res.status(200).json(updatedUsuario);
  } catch (error) {
    return res.status(500).json({ message: 'Error al actualizar el usuario', error });
  }
};

const remove = async (req, res) => {
  try {
    await UsuarioService.remove(req.params.id);
    return res.status(200).json({ message: 'Usuario eliminado correctamente' });
  } catch (error) {
    return res.status(500).json({ message: 'Error al eliminar el usuario', error });
  }
};

const validate = async (req, res) => {
  const { correo, contrasena } = req.body;

  try {
    const usuario = await UsuarioService.validate(correo, contrasena);

    if (usuario) {
      return res.status(200).json(usuario);  // Devolveremos el objeto usuario con el rol
    } else {
      return res.status(404).json({ message: 'Usuario o contraseña incorrectos' });
    }
  } catch (err) {
    return res.status(500).json({ message: 'Error en la validación del usuario', error: err });
  }
};

export default { findAll, findOne, create, update, remove, validate };

)

PsicologoController.js:
(
import PsicologoService from '../services/PsicologoService.js';

const findAll = async (req, res) => {
    const result = await PsicologoService.findAll();
    return res.status(200).json(result);
};

const findOne = async (req, res) => {
    const { id } = req.params;
    const result = await PsicologoService.findOne(id);
    return result ? res.status(200).json(result) : res.status(404).json({ message: 'Psicologo no encontrado' });
};

const create = async (req, res) => {
    try {
        const newPsicologo = await PsicologoService.create(req.body);
        return res.status(201).json(newPsicologo);
    } catch (error) {
        return res.status(500).json({ message: 'Error al crear el Psicologo', error });
    }
};

const update = async (req, res) => {
    const result = await PsicologoService.update(req.params.id, req.body);
    return res.status(200).json(result);
};

const remove = async (req, res) => {
    const result = await PsicologoService.remove(req.params.id);
    return res.status(200).json({ message: 'Psicologo eliminado correctamente' });
};

export default { findAll, findOne, create, update, remove };

)

AuthMiddleware.js:
(
import jwt from 'jsonwebtoken';

const authMiddleware = (req, res, next) => {
    const token = req.headers['authorization'];
    if (!token) return res.status(403).json({ message: 'Token no proporcionado' });

    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
        if (err) return res.status(500).json({ message: 'Fallo en la autenticación' });

        req.userId = decoded.id;
        next();
    });
};

export default authMiddleware;

)

paciente.js:
(
import { DataTypes } from 'sequelize';
import sequelize from '../config/database.js';

const Paciente = sequelize.define('Paciente', {
  idPaciente: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  historial: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  Usuario_id_usuario: {
    type: DataTypes.INTEGER,
    allowNull: false,
  }
}, {
  timestamps: false
});

export default Paciente;

)

psicologogeneral.js:
(
import { DataTypes } from 'sequelize';
import sequelize from '../config/database.js';

const PsicologoGeneral = sequelize.define('PsicologoGeneral', {
  id_psicologogeneral: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  Usuario_id_usuario: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'Usuario',
      key: 'id_usuario',
    },
    onDelete: 'CASCADE',
  }
}, {
  timestamps: false,
  freezeTableName: true,  // Evita pluralización automática
});

export default PsicologoGeneral;

)

usuario.js:
(
import { DataTypes } from 'sequelize';
import sequelize from '../config/database.js';
import PsicologoGeneral from './psicologogeneral.js';  // Importar PsicologoGeneral

const Usuario = sequelize.define('Usuario', {
  id_usuario: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  nombre: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  apellido: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  correo: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  DNI: {
    type: DataTypes.STRING,
    allowNull: true,
    unique: true,
  },
  NumCelular: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  contrasena: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  fecha_nacimiento: {
    type: DataTypes.DATE,
    allowNull: true,
  },
  rol: {
    type: DataTypes.STRING,
    allowNull: false,
    defaultValue: 'Paciente',
  }
}, {
  freezeTableName: true,  // Evita que Sequelize pluralice el nombre de la tabla
  timestamps: false,
});

// Relación con PsicologoGeneral
Usuario.hasOne(PsicologoGeneral, { foreignKey: 'Usuario_id_usuario' });
PsicologoGeneral.belongsTo(Usuario, { foreignKey: 'Usuario_id_usuario' });

export default Usuario;

)

Psicologo.js:
(
import { DataTypes } from 'sequelize';
import sequelize from '../config/database.js';

const Psicologo = sequelize.define('Psicologo', {
  id_Psicologo: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  especialidad: {
    type: DataTypes.STRING,
    allowNull: false,  // No permitir nulos, la especialidad es obligatoria
  },
  PsicologoGeneral_id_psicologogeneral: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'PsicologoGeneral',
      key: 'id_psicologogeneral',
    },
  },
}, {
  timestamps: false,
  freezeTableName: true, // Evita pluralización
});

export default Psicologo;

)

index.js:
(
import { Sequelize } from 'sequelize';
import sequelize from '../config/database.js';

// Importar todos los modelos
import Usuario from './usuario.js';
import Paciente from './paciente.js';
import PsicologoGeneral from './psicologogeneral.js';
import Cuestionario from './cuestionario.js';
import Psicologo from './Psicologo.js';
import Historial from './historial.js';
import Horario from './horario.js';
import Reporte from './reporte.js';
import RevisionDiagnostica from './revisionDiagnostica.js';
import Sesion from './sesion.js';
import SolicitarCita from './solicitarCita.js';

// Definir relaciones entre los modelos
Usuario.hasOne(Paciente, { foreignKey: 'Usuario_id_usuario' });
Paciente.belongsTo(Usuario, { foreignKey: 'Usuario_id_usuario' });

Usuario.hasOne(PsicologoGeneral, { foreignKey: 'Usuario_id_usuario' });
PsicologoGeneral.belongsTo(Usuario, { foreignKey: 'Usuario_id_usuario' });

Paciente.hasMany(Cuestionario, { foreignKey: 'Paciente_idPaciente' });
Cuestionario.belongsTo(Paciente, { foreignKey: 'Paciente_idPaciente' });

// Definir relación entre Psicologo y PsicologoGeneral (eliminar duplicado)
Psicologo.belongsTo(PsicologoGeneral, {
  foreignKey: 'PsicologoGeneral_id_psicologogeneral',
  as: 'psicologoGeneral'
});

Paciente.hasMany(Historial, { foreignKey: 'Paciente_idPaciente' });
Historial.belongsTo(Paciente, { foreignKey: 'Paciente_idPaciente' });

PsicologoGeneral.hasMany(Horario, { foreignKey: 'PsicologoGeneral_id_psicologogeneral' });
Horario.belongsTo(PsicologoGeneral, { foreignKey: 'PsicologoGeneral_id_psicologogeneral' });

Sesion.belongsTo(Psicologo, { foreignKey: 'Psicologo_id_Psicologo' });
Sesion.belongsTo(Paciente, { foreignKey: 'Paciente_idPaciente' });
Sesion.belongsTo(RevisionDiagnostica, { foreignKey: 'RevisiónDiagnostica_idDiagnostico' });

SolicitarCita.belongsTo(Paciente, { foreignKey: 'Paciente_idPaciente' });
RevisionDiagnostica.belongsTo(SolicitarCita, { foreignKey: 'SolicitarCita_idSolicitarCita' });

Reporte.belongsTo(Sesion, { foreignKey: 'Sesion_id_sesion' });

// Exportar todos los modelos
export {
    Usuario,
    Paciente,
    PsicologoGeneral,  // Asegúrate de que esto esté presente
    Cuestionario,
    Psicologo,
    Historial,
    Horario,
    Reporte,
    RevisionDiagnostica,
    Sesion,
    SolicitarCita
  };
  
)

PacienteRoutes.js:
(
import express from 'express';
import PacienteController from '../controllers/pacienteController.js';

const router = express.Router();

router.get('/', PacienteController.findAll);
router.get('/:id', PacienteController.findOne);
router.post('/', PacienteController.create);
router.put('/:id', PacienteController.update);
router.delete('/:id', PacienteController.remove);

export default router;

)

PsicologoGeneralRoutes.js:
(
import express from 'express';
import PsicologoGeneralController from '../controllers/psicologoGeneralController.js';

const router = express.Router();

router.get('/', PsicologoGeneralController.findAll);
router.get('/:id', PsicologoGeneralController.findOne);
router.post('/', PsicologoGeneralController.create);
router.put('/:id', PsicologoGeneralController.update);
router.delete('/:id', PsicologoGeneralController.remove);

export default router;

)

UsuarioRoutes.js:
(
import express from 'express';
import UsuarioController from '../controllers/UsuarioController.js';  // Asegúrate de que la ruta es correcta

const router = express.Router();

router.get('/', UsuarioController.findAll);
router.get('/:id', UsuarioController.findOne);
router.post('/', UsuarioController.create);
router.put('/:id', UsuarioController.update);
router.delete('/:id', UsuarioController.remove);
router.post('/validate', UsuarioController.validate);  // Para la validación de login

export default router;

)

PsicologoRoutes.js:
(
import express from 'express';
import PsicologoController from '../controllers/PsicologoController.js';

const router = express.Router();

router.get('/', PsicologoController.findAll);
router.get('/:id', PsicologoController.findOne);
router.post('/', PsicologoController.create);
router.put('/:id', PsicologoController.update);
router.delete('/:id', PsicologoController.remove);

export default router;

)

UsuarioService.js:
(
import { Usuario, Paciente, PsicologoGeneral } from '../models/index.js';

const findAll = async () => {
  return await Usuario.findAll();
};

const findOne = async (id) => {
  return await Usuario.findByPk(id);
};

const create = async (data) => {
  try {
    const newUsuario = await Usuario.create(data);

    // Si el rol es "Paciente", creamos un registro en Paciente
    if (data.rol === 'Paciente') {
      await Paciente.create({ Usuario_id_usuario: newUsuario.id_usuario });
    }

    // Si el rol es "Psicologo", creamos un registro en PsicologoGeneral
    if (data.rol === 'Psicologo') {
      await PsicologoGeneral.create({ Usuario_id_usuario: newUsuario.id_usuario });
    }

    return newUsuario;
  } catch (err) {
    console.error(err);
    return null;
  }
};

const update = async (id, data) => {
  const usuario = await Usuario.findByPk(id);
  if (!usuario) {
    throw new Error('Usuario no encontrado');
  }
  await usuario.update(data);
  return usuario;
};

const remove = async (id) => {
  const usuario = await Usuario.findByPk(id);
  if (!usuario) {
    throw new Error('Usuario no encontrado');
  }
  await usuario.destroy();
};

const validate = async (correo, contrasena) => {
  try {
    const usuario = await Usuario.findOne({ where: { correo, contrasena } });

    if (usuario) {
      return usuario;  // Devolveremos el objeto usuario con el rol
    } else {
      return null;
    }
  } catch (err) {
    console.error(err);
    return null;
  }
};

export default { findAll, findOne, create, update, remove, validate };

)

PsicologoService.js:
(
import Psicologo from '../models/Psicologo.js';

const findAll = async () => {
  return await Psicologo.findAll();
};

const findOne = async (id) => {
  return await Psicologo.findByPk(id);
};

const create = async (data) => {
  return await Psicologo.create(data);

};


const update = async (id, data) => {
  const Psicologo = await Psicologo.findByPk(id);
  
  if (!Psicologo) {
    throw new Error('Psicologo no encontrado');
  }

  await Psicologo.update(data);
  return Psicologo;
};

const remove = async (id) => {
  return await Psicologo.destroy({ where: { id_Psicologo: id } });
};

export default { findAll, findOne, create, update, remove };

)

PacienteService.js:
(
import Paciente from '../models/paciente.js';

const findAll = async () => {
    try {
        return await Paciente.findAll();
    } catch (err) {
        console.error(err);
        return null;
    }
};

const create = async (paciente) => {
    try {
        return await Paciente.create(paciente);
    } catch (err) {
        console.error(err);
        return null;
    }
};

const findOne = async (id) => {
    try {
        return await Paciente.findOne({ where: { idPaciente: id } });
    } catch (err) {
        console.error(err);
        return null;
    }
};

const update = async (paciente) => {
    try {
        const foundPaciente = await Paciente.findByPk(paciente.idPaciente);
        if (!foundPaciente) return null;

        await foundPaciente.update(paciente);
        return foundPaciente;
    } catch (err) {
        console.error(err);
        return null;
    }
};

const remove = async (id) => {
    try {
        const result = await Paciente.destroy({ where: { idPaciente: id } });
        return result === 1;
    } catch (err) {
        console.error(err);
        return null;
    }
};

export default { findAll, create, findOne, update, remove };

)

PsicologoGeneralService.js:
(
import PsicologoGeneral from '../models/psicologogeneral.js';

const findAll = async () => {
    return await PsicologoGeneral.findAll();
};

const findOne = async (id) => {
    return await PsicologoGeneral.findByPk(id);
};

const create = async (data) => {
    return await PsicologoGeneral.create(data);
};

const update = async (id, data) => {
    const psicologogeneral = await PsicologoGeneral.findByPk(id);
    if (!psicologogeneral) {
        throw new Error('Psicólogo general no encontrado');
    }
    await psicologogeneral.update(data);
    return psicologogeneral;
};

const remove = async (id) => {
    const psicologogeneral = await PsicologoGeneral.findByPk(id);
    if (!psicologogeneral) {
        throw new Error('Psicólogo general no encontrado');
    }
    await psicologogeneral.destroy();
};

export default { findAll, findOne, create, update, remove };

)
